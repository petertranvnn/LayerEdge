#!/bin/bash

# M√†u s·∫Øc cho giao di·ªán
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[0;33m'
NC='\033[0m'

# T·ªáp log
LOG_FILE="$HOME/light_node_setup.log"
echo "Qu√° tr√¨nh c√†i ƒë·∫∑t b·∫Øt ƒë·∫ßu l√∫c $(date)" > "$LOG_FILE"

# Ki·ªÉm tra k·∫øt n·ªëi internet
echo -e "${CYAN}üîç Ki·ªÉm tra k·∫øt n·ªëi internet...${NC}"
if ! ping -c 3 google.com &> /dev/null; then
    echo -e "${RED}‚ùå Kh√¥ng ph√°t hi·ªán k·∫øt n·ªëi internet! Vui l√≤ng ki·ªÉm tra m·∫°ng.${NC}" | tee -a "$LOG_FILE"
    exit 1
fi
echo -e "${GREEN}‚úÖ K·∫øt n·ªëi internet ho·∫°t ƒë·ªông!${NC}" | tee -a "$LOG_FILE"

# logo
echo -e '\e[34m'
echo -e "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó"
echo -e "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë"
echo -e "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë"
echo -e "‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë"
echo -e "‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë"
echo -e "‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù"
echo -e '\e[0m'
echo -e "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ch∆∞∆°ng tr√¨nh l√™n ƒë·ªânh Node/validator" | tee -a "$LOG_FILE"

# B·∫Øt ƒë·∫ßu qu√° tr√¨nh c√†i ƒë·∫∑t
echo -e "${YELLOW}üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh c√†i ƒë·∫∑t...${NC}" | tee -a "$LOG_FILE"

# C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c c√¥ng c·ª• c·∫ßn thi·∫øt
echo -e "${CYAN}üîÑ C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c c√¥ng c·ª•...${NC}" | tee -a "$LOG_FILE"
sudo apt update && sudo apt upgrade -y >> "$LOG_FILE" 2>&1
sudo apt install -y git curl build-essential screen ufw >> "$LOG_FILE" 2>&1

# C·∫•u h√¨nh t∆∞·ªùng l·ª≠a
echo -e "${CYAN}üîí C·∫•u h√¨nh t∆∞·ªùng l·ª≠a...${NC}" | tee -a "$LOG_FILE"
sudo ufw allow 22   # SSH
sudo ufw allow 9090 # gRPC
sudo ufw allow 3001 # ZK Prover
sudo ufw enable -y >> "$LOG_FILE" 2>&1
echo -e "${GREEN}‚úÖ T∆∞·ªùng l·ª≠a ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!${NC}" | tee -a "$LOG_FILE"

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t Go
if ! command -v go &> /dev/null || [[ $(go version | awk '{print $3}' | sed 's/go//') < "1.18" ]]; then
    echo -e "${CYAN}üì¶ C√†i ƒë·∫∑t Go...${NC}" | tee -a "$LOG_FILE"
    wget https://go.dev/dl/go1.21.8.linux-amd64.tar.gz -O go.tar.gz >> "$LOG_FILE" 2>&1
    sudo tar -C /usr/local -xzf go.tar.gz >> "$LOG_FILE" 2>&1
    echo 'export PATH=$PATH:/usr/local/go/bin' | sudo tee -a /etc/profile > /dev/null
    source /etc/profile
    rm go.tar.gz
    if command -v go &> /dev/null; then
        echo -e "${GREEN}‚úÖ ƒê√£ c√†i ƒë·∫∑t Go: $(go version)${NC}" | tee -a "$LOG_FILE"
    else
        echo -e "${RED}‚ùå L·ªói: Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Go!${NC}" | tee -a "$LOG_FILE"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Go ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t: $(go version)${NC}" | tee -a "$LOG_FILE"
fi

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t Rust
if ! command -v rustc &> /dev/null || [[ $(rustc --version | awk '{print $2}') < "1.81.0" ]]; then
    echo -e "${CYAN}üì¶ C√†i ƒë·∫∑t Rust...${NC}" | tee -a "$LOG_FILE"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y >> "$LOG_FILE" 2>&1
    source "$HOME/.cargo/env"
    rustup update >> "$LOG_FILE" 2>&1
    echo -e "${GREEN}‚úÖ ƒê√£ c√†i ƒë·∫∑t Rust: $(rustc --version)${NC}" | tee -a "$LOG_FILE"
else
    echo -e "${GREEN}‚úÖ Rust ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t: $(rustc --version)${NC}" | tee -a "$LOG_FILE"
fi

# C√†i ƒë·∫∑t Risc0 Toolchain
echo -e "${CYAN}üì• C√†i ƒë·∫∑t Risc0 Toolchain...${NC}" | tee -a "$LOG_FILE"
curl -L https://risczero.com/install | bash >> "$LOG_FILE" 2>&1
rzup install >> "$LOG_FILE" 2>&1
source "$HOME/.bashrc"
echo -e "${GREEN}‚úÖ ƒê√£ c√†i ƒë·∫∑t Risc0 Toolchain!${NC}" | tee -a "$LOG_FILE"

# Sao ch√©p kho l∆∞u tr·ªØ
echo -e "${YELLOW}üóëÔ∏è X√≥a th∆∞ m·ª•c light-node c≈© n·∫øu t·ªìn t·∫°i...${NC}" | tee -a "$LOG_FILE"
rm -rf "$HOME/light-node"
echo -e "${CYAN}üîó Sao ch√©p kho l∆∞u tr·ªØ...${NC}" | tee -a "$LOG_FILE"
git clone https://github.com/Layer-Edge/light-node.git >> "$LOG_FILE" 2>&1 && echo -e "${GREEN}‚úÖ ƒê√£ sao ch√©p kho l∆∞u tr·ªØ!${NC}" | tee -a "$LOG_FILE"
cd light-node || exit

# Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p Private Key
while true; do
    echo -e "${YELLOW}üîë Vui l√≤ng nh·∫≠p Private Key c·ªßa b·∫°n: ${NC}"
    read -r PRIVATE_KEY
    if [ -z "$PRIVATE_KEY" ]; then
        echo -e "${RED}‚ùå L·ªói: Private Key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng! Vui l√≤ng nh·∫≠p l·∫°i.${NC}" | tee -a "$LOG_FILE"
    else
        echo -e "${GREEN}‚úÖ ƒê√£ nh·∫≠n Private Key th√†nh c√¥ng!${NC}" | tee -a "$LOG_FILE"
        break
    fi
done
export PRIVATE_KEY

# Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
echo -e "${CYAN}üîÑ Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng...${NC}" | tee -a "$LOG_FILE"
export GRPC_URL="grpc.testnet.layeredge.io:9090"
export CONTRACT_ADDR="cosmos1ufs3tlq4umljk0qfe8k5ya0x6hpavn897u2cnf9k0en9jr7qarqqt56709"
export ZK_PROVER_URL="http://127.0.0.1:3001"
export API_REQUEST_TIMEOUT=100
export POINTS_API="https://light-node.layeredge.io"

# L∆∞u bi·∫øn m√¥i tr∆∞·ªùng v√†o .env
echo "GRPC_URL=$GRPC_URL" > .env
echo "CONTRACT_ADDR=$CONTRACT_ADDR" >> .env
echo "ZK_PROVER_URL=$ZK_PROVER_URL" >> .env
echo "API_REQUEST_TIMEOUT=$API_REQUEST_TIMEOUT" >> .env
echo "POINTS_API=$POINTS_API" >> .env
echo "PRIVATE_KEY=$PRIVATE_KEY" >> .env
chmod 600 .env  # B·∫£o m·∫≠t t·ªáp .env

# Kh·ªüi ƒë·ªông d·ªãch v·ª• Merkle
echo -e "${YELLOW}üõ†Ô∏è X√¢y d·ª±ng v√† ch·∫°y risc0-merkle-service...${NC}" | tee -a "$LOG_FILE"
cd risc0-merkle-service || exit
cargo build >> "$LOG_FILE" 2>&1 && screen -dmS risc0-service cargo run && echo -e "${GREEN}üöÄ risc0-merkle-service ƒëang ch·∫°y trong phi√™n screen!${NC}" | tee -a "$LOG_FILE"
for i in {1..30}; do
    if screen -list | grep -q "risc0-service"; then
        echo -e "${GREEN}‚úÖ risc0-merkle-service ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!${NC}" | tee -a "$LOG_FILE"
        break
    fi
    sleep 1
done

# Ch·∫°y Light Node
cd .. || exit
echo -e "${YELLOW}üñ•Ô∏è Kh·ªüi ƒë·ªông m√°y ch·ªß light-node...${NC}" | tee -a "$LOG_FILE"
go build >> "$LOG_FILE" 2>&1 && screen -dmS light-node ./light-node && echo -e "${GREEN}üöÄ light-node ƒëang ch·∫°y trong phi√™n screen!${NC}" | tee -a "$LOG_FILE"

# T·ª± ƒë·ªông l·∫•y ƒëi·ªÉm t·ª´ API
echo -e "${CYAN}üìä K·∫øt n·ªëi CLI Node v·ªõi LayerEdge Dashboard...${NC}" | tee -a "$LOG_FILE"
WALLET_ADDRESS="$CONTRACT_ADDR"  # Gi·∫£ s·ª≠ v√≠ CLI l√† CONTRACT_ADDR
POINTS_URL="https://light-node.layeredge.io/api/cli-node/points/$WALLET_ADDRESS"
curl -s "$POINTS_URL" >> "$LOG_FILE" 2>&1 && echo -e "${GREEN}‚úÖ ƒê√£ l·∫•y ƒëi·ªÉm t·ª´ API: $POINTS_URL${NC}" | tee -a "$LOG_FILE"

# Ho√†n t·∫•t
echo -e "${GREEN}üéâ Ho√†n t·∫•t c√†i ƒë·∫∑t!${NC}" | tee -a "$LOG_FILE"
echo -e "${CYAN}‚ÑπÔ∏è Ki·ªÉm tra d·ªãch v·ª•: 'screen -r risc0-service' ho·∫∑c 'screen -r light-node'${NC}" | tee -a "$LOG_FILE"
echo -e "${CYAN}‚ÑπÔ∏è Log chi ti·∫øt t·∫°i: $LOG_FILE${NC}" | tee -a "$LOG_FILE"
echo -e "${CYAN}‚ÑπÔ∏è K·∫øt n·ªëi v√≠ t·∫°i: dashboard.layeredge.io${NC}" | tee -a "$LOG_FILE"
